import asyncio
import random
import re
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.strategy import FSMStrategy
from aiogram.router import Router

API_TOKEN = "8175830600:AAEqdbA66sDnJJc-Czw1zo7gHuZlC2rocTs"

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher()
router = Router()

# /start
@router.message(lambda msg: msg.text and msg.text.startswith("/start"))
async def start_command(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—Éüî®", callback_data="report")]
    ])
    text = (
        "*–≠—Ç–æ –ª—É—á—à–∏–π –∞–Ω—Ç–∏-—Å–∫–∞–º –ø—Ä–æ–µ–∫—Ç* –Ω–∞ —Ä—ã–Ω–∫–µ TG\n\n"
        "*–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞*\n\n"
        "_‚ïô –û—Ç–ø—Ä–∞–≤–∏—Ç—å @username_\n\n"
        "*–ß—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –±–æ—Ç –≤ –æ—Ç–≤–µ—Ç*\n\n"
        "_‚ïü ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_\n"
        "_‚ïü –ù–∞–ª–∏—á–∏–µ –≤ —Å–∫–∞–º –±–∞–∑–µ_\n"
        "_‚ïü –ù–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π_\n"
        "_‚ïô –ù–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –¢–û–ü –ì–∞—Ä–∞–Ω—Ç–æ–≤_\n\n"
        "*‚ïì –ï—Å—Ç—å –∂–∞–ª–æ–±–∞ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞?*\n"
        "*‚ïô –°–∫–æ—Ä–µ–µ –∂–º–∏ –Ω–∞ ¬´–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É¬ª*"
    )
    await message.answer(text, reply_markup=kb)

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É"
@router.callback_query(lambda c: c.data == "report")
async def report_button(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", callback_data="fill_form")]
    ])
    text = (
        "*–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–∞—á–∞ –∂–∞–ª–æ–±.*\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ, –≤–∞–º *–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
        "> 1. –Æ–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ Telegram ID –º–æ—à–µ–Ω–Ω–∏–∫–∞.\n"
        "> 2. –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ [ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ ]\n"
        "> 3. –§–æ—Ç–æ / –í–∏–¥–µ–æ, –¥–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ [ –æ—Ç 2 –¥–æ 10 –º–µ–¥–∏–∞ ]\n\n"
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã, –∫–æ—Ç–æ—Ä–∞—è *–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–µ* –∏–ª–∏ *–∂–∞–ª–æ–±—ã —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –≤ —Å–µ–±–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º—É—Å–æ—Ä* "
        "—Å —Ü–µ–ª—å—é –Ω–∞–≤—Ä–µ–¥–∏—Ç—å –∏–ª–∏ –∑–∞—Ç–æ—Ä–º–æ–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å –ø–æ –ø—Ä–∏–µ–º—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±, "
        "*–≤–µ–¥—ë—Ç –∑–∞ —Å–æ–±–æ–π –∑–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±, –∞ —Ç–∞–∫–∂–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ —Å–∞–º–æ–º –±–æ—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.*\n\n"
        "_–ù–∞–∂–∏–º–∞—è –Ω–∞ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É¬ª,_ *–≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.*"
    )
    await callback.message.answer(text, reply_markup=kb)
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É"
@router.callback_query(lambda c: c.data == "fill_form")
async def fill_form(callback: CallbackQuery):
    text = (
        "*‚ö°Ô∏è –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–∞—á–∞ –∂–∞–ª–æ–±.*\n\n"
        "*–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏*\n\n"
        "_1 ‚Äì –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —é–∑–µ—Ä–Ω–µ–π–º –º–æ—à–µ–Ω–Ω–∏–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –∂–∞–ª–æ–±–∞._\n"
        "_2 ‚Äì –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)_\n"
        "_3 ‚Äì –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ / –≤–∏–¥–µ–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞_"
    )
    await callback.message.answer(text)
    await callback.answer()

# –ü–æ–∏—Å–∫ –ø–æ username
@router.message(lambda msg: msg.text and re.search(r"@[\w\d_]+", msg.text))
async def handle_username_report(message: Message):
    username = re.search(r"@[\w\d_]+", message.text).group()
    search_count = random.randint(1, 10)

    response = (
        f"*üü° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username}*\n"
        f"*üëÄ –ò—Å–∫–∞–ª–∏:* _{search_count} —Ä–∞–∑(–∞)_\n\n"
        f"*‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤.*\n"
        f"_–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏ —Å –Ω–∞–¥—ë–∂–Ω—ã–º –≥–∞—Ä–∞–Ω—Ç–æ–º._\n\n"
        f"_üìå –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É¬ª –≤ –º–µ–Ω—é –±–æ—Ç–∞._\n\n"
        f"*üßæ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ TON:*\n"
        f"https://t.me/tester_in_ton"
    )

    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–ª–æ–±—ã
@router.message()
async def handle_report_submission(message: Message):
    if message.text or message.caption or message.photo or message.video:
        complaint_id = uuid.uuid4().hex[:8]
        await message.answer(
            f"*–í–∞—à–∞ –∂–∞–ª–æ–±–∞ #{complaint_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º @TesterBanBot. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö*"
        )

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
